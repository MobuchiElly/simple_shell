#include "shell.h"

/**
 * main - main function for the shell loop
 *
 * Return: return 0 success
 */

int main(int argc, char *argv[], char *env[])
{
	char *command;
       	char *command_path;
	char *token;
	char *args_str;
	int i, n;

	if (argc < 2) {
		perror("Usage: <command> [args...]");
		exit(EXIT_FAILURE);
	}
        command = argv[1];
        args_str = NULL;

        if (argc > 2)
	{
                size_t args_size = 0;
                for (i = 2; i < argc; i++) {
                        args_size += _strlen(argv[i]) + 1;
                }

                args_str = malloc(args_size);
                if (!args_str) {
                        perror("malloc error");
                        exit(EXIT_FAILURE);
                }

                args_str[0] = '\0';
                for (n = 2; n < argc; n++) {
                        _strcat(args_str, argv[i]);
                        _strcat(args_str, " ");
                }
                args_str[_strlen(args_str) - 1] = '\0';
        }

        command_path = _getenv("PATH");
        token = strtok(command_path, ":");

        while (token != NULL)
        {
                char *full_path = malloc(_strlen(token) + _strlen(command) + 2);
                if (!full_path)
                {
                        perror("malloc error");
                        exit(EXIT_FAILURE);
                }
                _strcpy(full_path, token);
                _strcat(full_path, "/");
                _strcat(full_path, command);

                if (access(full_path, F_OK) != -1)
                {
                        char **args = NULL;

                        if (args_str) {
                                args = malloc(sizeof(char *) * 2);
                                if (!args)
                                {
                                        perror("malloc error");
                                        exit(EXIT_FAILURE);
                                }

                                args[0] = command;
                                args[1] = args_str;
                                args[2] = NULL;
                        }

                        if (fork() == 0)
                        {
                                if (execve(full_path, args ? args : &command, env) == -1)
                                {
                                        perror("execve error");
                                        exit(EXIT_FAILURE);
                                }
                        }
                        else
                        {
                                wait(NULL);
                        }

                        free(args);
                        free(full_path);
                        break;
                }

                free(full_path);
                token = strtok(NULL, ":");
        }

        if (!token)
        {
		perror(command);
        }

        free(args_str);
        return EXIT_SUCCESS;
}
